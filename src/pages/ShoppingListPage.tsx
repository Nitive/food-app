import { Badge, Button, Card, Group, List, LoadingOverlay, Paper, Stack, Text, Title } from '@mantine/core'
import { DateInput } from '@mantine/dates'
import { useStore } from '@nanostores/react'
import { CheckCircleFillIcon } from '@primer/octicons-react'
import React from 'react'
import { Link } from 'react-router-dom'
import { apiClient } from '../api-client.js'
import { $loading, $shoppingList, $user, exportShoppingListToPDF } from '../app.js'
import { Breadcrumbs } from '../components/Breadcrumbs.js'
import { QuickActions } from '../components/QuickActions.js'
import { UserMenu } from '../components/UserMenu.js'

export function ShoppingListPage() {
  const shoppingList = useStore($shoppingList)
  const loading = useStore($loading)
  const user = useStore($user)
  const [selectedDate, setSelectedDate] = React.useState<Date | null>(new Date())

  const handleLogout = () => {
    // –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }

  const handleDateChange = async (dateString: string | null) => {
    if (dateString) {
      const date = new Date(dateString)
      setSelectedDate(date)
      try {
        const newShoppingList = await apiClient.getShoppingList(dateString)
        $shoppingList.set(newShoppingList)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫:', error)
      }
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  }

  const getMealTypeEmoji = (mealType: string) => {
    switch (mealType) {
      case 'breakfast':
        return 'üåÖ'
      case 'lunch':
        return 'üçΩÔ∏è'
      case 'dinner':
        return 'üåô'
      case 'snack':
        return 'üçé'
      default:
        return 'üçΩÔ∏è'
    }
  }

  return (
    <Stack gap="lg" pos="relative">
      <LoadingOverlay visible={loading} />

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <Group justify="space-between" align="center">
        <div>
          <Title>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</Title>
          <Text size="sm" c="dimmed" mt={4}>
            –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
          </Text>
        </div>
        <Group gap="xs">
          <QuickActions
            showExport={shoppingList.items.length > 0}
            onExportPDF={() => exportShoppingListToPDF(shoppingList.items)}
            exportLabel="–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞"
          />
          {user && <UserMenu user={user} onLogout={handleLogout} onOpenProfile={() => alert('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')} />}
        </Group>
      </Group>

      <Breadcrumbs />

      {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
      <Card withBorder p="md">
        <Group gap="md" align="flex-end">
          <div>
            <Text size="sm" fw={500} mb="xs">
              –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:
            </Text>
            <DateInput value={selectedDate} onChange={handleDateChange} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É" clearable w={200} />
          </div>
          {shoppingList.date && (
            <Text size="sm" c="dimmed">
              –°–ø–∏—Å–æ–∫ –¥–ª—è: {formatDate(shoppingList.date || '')}
            </Text>
          )}
        </Group>
      </Card>

      {shoppingList.items.length === 0 ? (
        <Card withBorder p="xl" style={{ textAlign: 'center' }}>
          <Text size="xl" c="dimmed" mb="md">
            üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç
          </Text>
          <Text c="dimmed" mb="lg">
            {selectedDate
              ? `–ù–∞ ${formatDate(selectedDate.toISOString().split('T')[0] || '')} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤`
              : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫'}
          </Text>
          <Button component={Link} to="/calendar" color="teal">
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
          </Button>
        </Card>
      ) : (
        <>
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö */}
          {shoppingList.recipes.length > 0 && (
            <Card withBorder p="md" style={{ backgroundColor: 'var(--mantine-color-teal-0)' }}>
              <Text fw={500} mb="sm">
                üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ {formatDate(shoppingList.date || '')}:
              </Text>
              <Group gap="xs">
                {shoppingList.recipes.map((recipe, index) => (
                  <Badge key={index} color="teal" variant="light">
                    {getMealTypeEmoji(recipe.mealType)} {recipe.name}
                  </Badge>
                ))}
              </Group>
            </Card>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∏—Å–∫–µ */}
          <Card withBorder p="md" style={{ backgroundColor: 'var(--mantine-color-amber-0)' }}>
            <Group gap="md" align="flex-start">
              <div style={{ fontSize: '24px' }}>üí°</div>
              <div style={{ flex: 1 }}>
                <Text fw={500} mb="xs">
                  –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:
                </Text>
                <Text size="sm" c="dimmed">
                  ‚Ä¢ –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                  <br />
                  ‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–º–µ—é—â–∏–µ—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ
                  <br />
                  ‚Ä¢ –û—Ç–º–µ—Ç—å—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω–∏—Ö
                  <br />‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ PDF –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                </Text>
              </div>
            </Group>
          </Card>

          {/* –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ */}
          <Paper p="md" withBorder>
            <Group justify="space-between" align="center" mb="md">
              <Text fw={500} size="lg">
                –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ({shoppingList.items.length})
              </Text>
            </Group>

            <List icon={<CheckCircleFillIcon size={16} fill="var(--mantine-color-sage-8)" />} spacing="sm">
              {shoppingList.items.map((item: any) => (
                <List.Item
                  key={item.name}
                  style={{
                    padding: '8px 12px',
                    borderRadius: '6px',
                    transition: 'all 0.2s ease',
                    cursor: 'pointer',
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = 'var(--mantine-color-gray-0)'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'transparent'
                  }}
                >
                  <Group justify="space-between" align="center">
                    <Text fw={500} style={{ flex: 1 }}>
                      {item.name}
                    </Text>
                    <Text size="sm" c="dimmed" style={{ fontFamily: 'monospace' }}>
                      {item.amount} {item.amountType}
                    </Text>
                  </Group>
                </List.Item>
              ))}
            </List>
          </Paper>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card withBorder p="md">
            <Group justify="space-between" align="center">
              <Text size="sm" c="dimmed">
                –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {shoppingList.items.length}
              </Text>
              <Group gap="xs">
                <Button variant="light" color="indigo" component={Link} to="/calendar">
                  –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
                </Button>
              </Group>
            </Group>
          </Card>
        </>
      )}
    </Stack>
  )
}
