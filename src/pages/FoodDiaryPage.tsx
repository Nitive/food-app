import {
  ActionIcon,
  Badge,
  Button,
  Card,
  Grid,
  Group,
  LoadingOverlay,
  Modal,
  NumberInput,
  Select,
  Stack,
  Text,
  Title,
} from '@mantine/core'
import { DateInput } from '@mantine/dates'
import { useStore } from '@nanostores/react'
import { PlusIcon, TrashIcon } from '@primer/octicons-react'
import React from 'react'
import { apiClient } from '../api-client.js'
import { $loading, $recipes, $user, exportFoodDiaryToPDF } from '../app.js'
import { Breadcrumbs } from '../components/Breadcrumbs.js'
import { QuickActions } from '../components/QuickActions.js'
import { UserMenu } from '../components/UserMenu.js'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getRecommendedCalories = (user: any) => {
  if (!user || !user.age || !user.weight || !user.height || !user.gender || !user.activityLevel) {
    return null
  }

  // –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ BMR
  let bmr = 0
  if (user.gender === 'male') {
    bmr = 88.362 + 13.397 * user.weight + 4.799 * user.height - 5.677 * user.age
  } else {
    bmr = 447.593 + 9.247 * user.weight + 3.098 * user.height - 4.33 * user.age
  }

  // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const activityMultipliers = {
    sedentary: 1.2,
    lightly_active: 1.375,
    moderately_active: 1.55,
    very_active: 1.725,
    extremely_active: 1.9,
  }

  const tdee = bmr * (activityMultipliers[user.activityLevel as keyof typeof activityMultipliers] || 1.2)

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
  let recommended = tdee
  if (user.goal === 'lose_weight') {
    recommended = tdee - 500 // –î–µ—Ñ–∏—Ü–∏—Ç 500 –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
  } else if (user.goal === 'gain_weight') {
    recommended = tdee + 300 // –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 300 –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞
  }

  return Math.round(recommended)
}

interface FoodEntry {
  id: string
  recipeId: number
  recipeName: string
  mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack'
  servingSize: number
  calories: number
  proteins: number
  fats: number
  carbohydrates: number
  timestamp: string
  date: string
}

export function FoodDiaryPage() {
  const recipes = useStore($recipes)
  const loading = useStore($loading)
  const user = useStore($user)

  const [selectedDate, setSelectedDate] = React.useState<Date>(new Date())
  const [foodEntries, setFoodEntries] = React.useState<FoodEntry[]>([])
  const [addEntryModalOpened, setAddEntryModalOpened] = React.useState(false)
  const [selectedRecipe, setSelectedRecipe] = React.useState<number | null>(null)
  const [selectedMealType, setSelectedMealType] = React.useState<string>('lunch')
  const [servingSize, setServingSize] = React.useState<number>(1)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const [exportStartDate, setExportStartDate] = React.useState<Date>(() => {
    const date = new Date()
    date.setDate(date.getDate() - 7) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥
    return date
  })
  const [exportEndDate, setExportEndDate] = React.useState<Date>(new Date())
  const [exportModalOpened, setExportModalOpened] = React.useState(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  React.useEffect(() => {
    const loadFoodDiary = async () => {
      try {
        const dateString = selectedDate.toISOString().split('T')[0]
        const entries = await apiClient.getFoodDiary(dateString)

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const localEntries: FoodEntry[] = entries.map((entry) => ({
          id: entry.id.toString(),
          recipeId: entry.recipeId,
          recipeName: entry.recipe.name,
          mealType: entry.mealType as 'breakfast' | 'lunch' | 'dinner' | 'snack',
          servingSize: entry.servingSize,
          calories: entry.calories,
          proteins: entry.proteins,
          fats: entry.fats,
          carbohydrates: entry.carbohydrates,
          timestamp: entry.date.toISOString(),
          date: entry.date.toISOString().split('T')[0] || '',
        }))

        setFoodEntries(localEntries)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è:', error)
        setFoodEntries([])
      }
    }

    loadFoodDiary()
  }, [selectedDate])

  const handleAddEntry = async () => {
    if (!selectedRecipe || !selectedMealType) return

    try {
      const dateString = selectedDate.toISOString().split('T')[0] || ''
      const newEntry = await apiClient.addFoodDiaryEntry(
        dateString,
        selectedRecipe,
        selectedMealType || 'lunch',
        servingSize
      )

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const localEntry: FoodEntry = {
        id: newEntry.id.toString(),
        recipeId: newEntry.recipeId,
        recipeName: newEntry.recipe.name,
        mealType: newEntry.mealType as 'breakfast' | 'lunch' | 'dinner' | 'snack',
        servingSize: newEntry.servingSize,
        calories: newEntry.calories,
        proteins: newEntry.proteins,
        fats: newEntry.fats,
        carbohydrates: newEntry.carbohydrates,
        timestamp: newEntry.date.toISOString(),
        date: newEntry.date.toISOString().split('T')[0] || '',
      }

      setFoodEntries((prev) => [...prev, localEntry])
      setAddEntryModalOpened(false)
      setSelectedRecipe(null)
      setServingSize(1)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏')
    }
  }

  const handleDeleteEntry = async (entryId: string) => {
    try {
      await apiClient.removeFoodDiaryEntry(parseInt(entryId))
      setFoodEntries((prev) => prev.filter((entry) => entry.id !== entryId))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏')
    }
  }

  const getDailyStats = () => {
    const totalCalories = foodEntries.reduce((sum, entry) => sum + entry.calories, 0)
    const totalProteins = foodEntries.reduce((sum, entry) => sum + entry.proteins, 0)
    const totalFats = foodEntries.reduce((sum, entry) => sum + entry.fats, 0)
    const totalCarbohydrates = foodEntries.reduce((sum, entry) => sum + entry.carbohydrates, 0)

    return {
      totalCalories,
      totalProteins,
      totalFats,
      totalCarbohydrates,
      totalEntries: foodEntries.length,
    }
  }

  const getMealTypeEmoji = (mealType: string) => {
    switch (mealType) {
      case 'breakfast':
        return 'üåÖ'
      case 'lunch':
        return 'üçΩÔ∏è'
      case 'dinner':
        return 'üåô'
      case 'snack':
        return 'üçé'
      default:
        return 'üçΩÔ∏è'
    }
  }

  const getMealTypeLabel = (mealType: string) => {
    switch (mealType) {
      case 'breakfast':
        return '–ó–∞–≤—Ç—Ä–∞–∫'
      case 'lunch':
        return '–û–±–µ–¥'
      case 'dinner':
        return '–£–∂–∏–Ω'
      case 'snack':
        return '–ü–µ—Ä–µ–∫—É—Å'
      default:
        return '–ü—Ä–∏–µ–º –ø–∏—â–∏'
    }
  }

  const getMealTypeColor = (mealType: string) => {
    switch (mealType) {
      case 'breakfast':
        return 'orange'
      case 'lunch':
        return 'green'
      case 'dinner':
        return 'blue'
      case 'snack':
        return 'purple'
      default:
        return 'gray'
    }
  }

  const stats = getDailyStats()

  return (
    <Stack gap="lg" pos="relative">
      <LoadingOverlay visible={loading} />

      <Group justify="space-between" align="center">
        <div>
          <Title>–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è</Title>
          <Text size="sm" c="dimmed" mt={4}>
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ, —á—Ç–æ –≤—ã —Å—ä–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
          </Text>
        </div>
        <Group gap="xs">
          <QuickActions
            showExport={foodEntries.length > 0}
            onExportPDF={() => setExportModalOpened(true)}
            exportLabel="–≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞"
          />

          {user && (
            <UserMenu
              user={user}
              onLogout={() => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å logout
                alert('Logout –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
              }}
              onOpenProfile={() => {
                alert('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
              }}
            />
          )}
        </Group>
      </Group>

      <Breadcrumbs />

      <Text c="dimmed">
        –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏. –ö–ë–ñ–£ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        —Ä–µ—Ü–µ–ø—Ç–æ–≤.
      </Text>

      <Grid>
        <Grid.Col span={9}>
          {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
          <Card withBorder p="md" mb="md">
            <Group justify="space-between" align="center">
              <div>
                <Text fw={500} mb={4}>
                  –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:
                </Text>
                <DateInput
                  value={selectedDate}
                  onChange={(date) => {
                    if (date && typeof date === 'object') {
                      setSelectedDate(date)
                    }
                  }}
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                  clearable={false}
                />
              </div>
              <Button leftSection={<PlusIcon size={16} />} onClick={() => setAddEntryModalOpened(true)} color="teal">
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
              </Button>
            </Group>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è */}
          <Card withBorder p="md" mb="md">
            <Title order={4} mb="md">
              üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
            </Title>
            <Grid>
              <Grid.Col span={3}>
                <Group justify="space-between">
                  <Text size="sm" fw={500}>
                    –ö–∞–ª–æ—Ä–∏–∏:
                  </Text>
                  <Badge size="lg" color="teal" variant="light">
                    {(() => {
                      const recommendedCalories = getRecommendedCalories(user)
                      if (recommendedCalories) {
                        const percentage = Math.round((stats.totalCalories / recommendedCalories) * 100)
                        let color = 'teal'
                        if (percentage < 80) color = 'orange'
                        else if (percentage > 120) color = 'red'
                        else color = 'green'

                        return (
                          <span style={{ color: `var(--mantine-color-${color}-6)` }}>
                            {stats.totalCalories}/{recommendedCalories} –∫–∫–∞–ª
                          </span>
                        )
                      }
                      return `${stats.totalCalories} –∫–∫–∞–ª`
                    })()}
                  </Badge>
                </Group>
              </Grid.Col>
              <Grid.Col span={3}>
                <Group justify="space-between">
                  <Text size="sm" fw={500}>
                    –ë–µ–ª–∫–∏:
                  </Text>
                  <Badge size="lg" color="green" variant="light">
                    {stats.totalProteins}–≥
                  </Badge>
                </Group>
              </Grid.Col>
              <Grid.Col span={3}>
                <Group justify="space-between">
                  <Text size="sm" fw={500}>
                    –ñ–∏—Ä—ã:
                  </Text>
                  <Badge size="lg" color="yellow" variant="light">
                    {stats.totalFats}–≥
                  </Badge>
                </Group>
              </Grid.Col>
              <Grid.Col span={3}>
                <Group justify="space-between">
                  <Text size="sm" fw={500}>
                    –£–≥–ª–µ–≤–æ–¥—ã:
                  </Text>
                  <Badge size="lg" color="blue" variant="light">
                    {stats.totalCarbohydrates}–≥
                  </Badge>
                </Group>
              </Grid.Col>
            </Grid>
          </Card>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π */}
          <Card withBorder p="md">
            <Title order={4} mb="md">
              üçΩÔ∏è –ó–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏
            </Title>

            {foodEntries.length === 0 ? (
              <Text c="dimmed" ta="center" py="xl">
                –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏!
              </Text>
            ) : (
              <Stack gap="md">
                {foodEntries.map((entry) => (
                  <Card key={entry.id} withBorder p="md">
                    <Group justify="space-between" align="flex-start">
                      <div style={{ flex: 1 }}>
                        <Group gap="xs" mb="xs">
                          <Badge color={getMealTypeColor(entry.mealType)} variant="light" size="sm">
                            {getMealTypeEmoji(entry.mealType)} {getMealTypeLabel(entry.mealType)}
                          </Badge>
                          <Badge size="sm" color="gray" variant="light">
                            {entry.servingSize} –ø–æ—Ä—Ü–∏—è
                            {entry.servingSize > 1 ? '–∏' : ''}
                          </Badge>
                        </Group>

                        <Text fw={500} size="lg" mb="xs">
                          {entry.recipeName}
                        </Text>

                        <Group gap="md">
                          <Text size="sm" c="dimmed">
                            –ö–∞–ª–æ—Ä–∏–∏: <strong>{entry.calories}</strong> –∫–∫–∞–ª
                          </Text>
                          <Text size="sm" c="dimmed">
                            –ë–µ–ª–∫–∏: <strong>{entry.proteins}</strong>–≥
                          </Text>
                          <Text size="sm" c="dimmed">
                            –ñ–∏—Ä—ã: <strong>{entry.fats}</strong>–≥
                          </Text>
                          <Text size="sm" c="dimmed">
                            –£–≥–ª–µ–≤–æ–¥—ã: <strong>{entry.carbohydrates}</strong>–≥
                          </Text>
                        </Group>
                      </div>

                      <ActionIcon variant="light" color="red" onClick={() => handleDeleteEntry(entry.id)}>
                        <TrashIcon size={16} />
                      </ActionIcon>
                    </Group>
                  </Card>
                ))}
              </Stack>
            )}
          </Card>
        </Grid.Col>

        <Grid.Col span={3}>
          <Stack gap="md">
            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            <Card withBorder p="md">
              <Title order={5} mb="sm" c="teal">
                üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </Title>
              <Stack gap="xs">
                <Text size="xs" c="dimmed">
                  ‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–¥—ã
                </Text>
                <Text size="xs" c="dimmed">
                  ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
                </Text>
                <Text size="xs" c="dimmed">
                  ‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏
                </Text>
                <Text size="xs" c="dimmed">
                  ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ
                </Text>
              </Stack>
            </Card>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <Card withBorder p="md">
              <Title order={5} mb="sm" c="blue">
                ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
              </Title>
              <Stack gap="xs">
                <Button
                  variant="light"
                  size="sm"
                  onClick={() => {
                    setSelectedMealType('breakfast')
                    setAddEntryModalOpened(true)
                  }}
                  color="orange"
                >
                  üåÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫
                </Button>
                <Button
                  variant="light"
                  size="sm"
                  onClick={() => {
                    setSelectedMealType('lunch')
                    setAddEntryModalOpened(true)
                  }}
                  color="green"
                >
                  üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–±–µ–¥
                </Button>
                <Button
                  variant="light"
                  size="sm"
                  onClick={() => {
                    setSelectedMealType('dinner')
                    setAddEntryModalOpened(true)
                  }}
                  color="blue"
                >
                  üåô –î–æ–±–∞–≤–∏—Ç—å —É–∂–∏–Ω
                </Button>
                <Button
                  variant="light"
                  size="sm"
                  onClick={() => {
                    setSelectedMealType('snack')
                    setAddEntryModalOpened(true)
                  }}
                  color="purple"
                >
                  üçé –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å
                </Button>
              </Stack>
            </Card>
          </Stack>
        </Grid.Col>
      </Grid>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
      <Modal
        opened={addEntryModalOpened}
        onClose={() => setAddEntryModalOpened(false)}
        title="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏"
        size="md"
      >
        <Stack gap="md">
          <Select
            label="–¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"
            value={selectedMealType}
            onChange={(value) => value && setSelectedMealType(value)}
            data={[
              { value: 'breakfast', label: 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫' },
              { value: 'lunch', label: 'üçΩÔ∏è –û–±–µ–¥' },
              { value: 'dinner', label: 'üåô –£–∂–∏–Ω' },
              { value: 'snack', label: 'üçé –ü–µ—Ä–µ–∫—É—Å' },
            ]}
          />

          <Select
            label="–†–µ—Ü–µ–ø—Ç"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç"
            value={selectedRecipe?.toString() || ''}
            onChange={(value) => value && setSelectedRecipe(Number(value))}
            data={recipes.map((recipe) => ({
              value: recipe.id.toString(),
              label: `${recipe.name} (${recipe.calories} –∫–∫–∞–ª)`,
            }))}
            searchable
          />

          <NumberInput
            label="–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏"
            value={servingSize}
            onChange={(value) => setServingSize(typeof value === 'number' ? value : 1)}
            min={0.1}
            max={10}
            step={0.1}
            decimalScale={1}
          />

          {selectedRecipe && (
            <Card withBorder p="md">
              <Text size="sm" fw={500} mb="xs">
                –†–∞—Å—á–µ—Ç –ö–ë–ñ–£:
              </Text>
              {(() => {
                const recipe = recipes.find((r) => r.id === selectedRecipe)
                if (!recipe) return null

                return (
                  <Group gap="md">
                    <Text size="xs" c="dimmed">
                      –ö–∞–ª–æ—Ä–∏–∏: <strong>{recipe.calories * servingSize}</strong> –∫–∫–∞–ª
                    </Text>
                    <Text size="xs" c="dimmed">
                      –ë–µ–ª–∫–∏: <strong>{recipe.proteins * servingSize}</strong>–≥
                    </Text>
                    <Text size="xs" c="dimmed">
                      –ñ–∏—Ä—ã: <strong>{recipe.fats * servingSize}</strong>–≥
                    </Text>
                    <Text size="xs" c="dimmed">
                      –£–≥–ª–µ–≤–æ–¥—ã: <strong>{recipe.carbohydrates * servingSize}</strong>–≥
                    </Text>
                  </Group>
                )
              })()}
            </Card>
          )}

          <Group justify="flex-end" gap="xs">
            <Button variant="light" onClick={() => setAddEntryModalOpened(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleAddEntry} disabled={!selectedRecipe} color="teal">
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </Group>
        </Stack>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <Modal
        opened={exportModalOpened}
        onClose={() => setExportModalOpened(false)}
        title="–≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"
        size="md"
      >
        <Stack gap="md">
          <Text size="sm" c="dimmed">
            –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
          </Text>

          <DateInput
            label="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É"
            value={exportStartDate}
            onChange={(date) => {
              if (date && typeof date === 'object') {
                setExportStartDate(date)
              }
            }}
            clearable={false}
          />

          <DateInput
            label="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É"
            value={exportEndDate}
            onChange={(date) => {
              if (date && typeof date === 'object') {
                setExportEndDate(date)
              }
            }}
            clearable={false}
          />

          {(() => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
            const filteredEntries = foodEntries.filter((entry) => {
              const entryDate = new Date(entry.date)
              return entryDate >= exportStartDate && entryDate <= exportEndDate
            })

            const periodStats = filteredEntries.reduce(
              (stats, entry) => ({
                calories: stats.calories + entry.calories,
                proteins: stats.proteins + entry.proteins,
                fats: stats.fats + entry.fats,
                carbohydrates: stats.carbohydrates + entry.carbohydrates,
                count: stats.count + 1,
              }),
              { calories: 0, proteins: 0, fats: 0, carbohydrates: 0, count: 0 }
            )

            return (
              <Card withBorder p="md">
                <Text size="sm" fw={500} mb="xs">
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:
                </Text>
                <Group gap="md">
                  <Text size="xs" c="dimmed">
                    –ó–∞–ø–∏—Å–µ–π: <strong>{periodStats.count}</strong>
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ö–∞–ª–æ—Ä–∏–∏: <strong>{periodStats.calories.toFixed(1)}</strong> –∫–∫–∞–ª
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ë–µ–ª–∫–∏: <strong>{periodStats.proteins.toFixed(1)}</strong>–≥
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ñ–∏—Ä—ã: <strong>{periodStats.fats.toFixed(1)}</strong>–≥
                  </Text>
                  <Text size="xs" c="dimmed">
                    –£–≥–ª–µ–≤–æ–¥—ã: <strong>{periodStats.carbohydrates.toFixed(1)}</strong>–≥
                  </Text>
                </Group>
              </Card>
            )
          })()}

          <Group justify="flex-end" gap="xs">
            <Button variant="light" onClick={() => setExportModalOpened(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={() => {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
                const filteredEntries = foodEntries.filter((entry) => {
                  const entryDate = new Date(entry.date)
                  return entryDate >= exportStartDate && entryDate <= exportEndDate
                })

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ date –∫ –∑–∞–ø–∏—Å—è–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                const entriesWithDate = filteredEntries.map((entry) => ({
                  ...entry,
                  date: new Date(entry.timestamp).toISOString().split('T')[0] || '',
                }))

                exportFoodDiaryToPDF(entriesWithDate, exportStartDate, exportEndDate)
                setExportModalOpened(false)
              }}
              color="teal"
            >
              –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF
            </Button>
          </Group>
        </Stack>
      </Modal>
    </Stack>
  )
}
