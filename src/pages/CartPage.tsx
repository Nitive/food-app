import React from 'react'
import { Stack, Title, Table, Text, Group, ActionIcon, NumberInput, Button, Card, LoadingOverlay } from '@mantine/core'
import { DashIcon, TrashIcon } from '@primer/octicons-react'
import { Link } from 'react-router-dom'
import { useStore } from '@nanostores/react'
import { $cartItems, $loading, $user } from '../app.js'
import { UserMenu } from '../components/UserMenu.js'
import { Breadcrumbs } from '../components/Breadcrumbs.js'
import { QuickActions } from '../components/QuickActions.js'
import { exportCartToPDF } from '../app.js'

export function CartPage() {
  const cartItems = useStore($cartItems)
  const loading = useStore($loading)
  const user = useStore($user)

  const stats = {
    calories: cartItems.reduce((sum: number, item: any) => sum + (item.recipe.calories * item.quantity), 0).toFixed(1),
    proteins: cartItems.reduce((sum: number, item: any) => sum + (item.recipe.proteins * item.quantity), 0).toFixed(1),
    fats: cartItems.reduce((sum: number, item: any) => sum + (item.recipe.fats * item.quantity), 0).toFixed(1),
    carbohydrates: cartItems.reduce((sum: number, item: any) => sum + (item.recipe.carbohydrates * item.quantity), 0).toFixed(1),
  }

  const handleLogout = () => {
    // –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }

  const clearCart = () => {
    // –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }

  const updateCartQuantity = (id: number, quantity: number) => {
    // –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }

  const removeFromCart = (id: number) => {
    // –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }

  return (
    <Stack gap="lg" pos="relative">
      <LoadingOverlay visible={loading} />

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <Group justify="space-between" align="center">
        <div>
          <Title>–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫</Title>
          <Text size="sm" c="dimmed" mt={4}>
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
          </Text>
        </div>
        <Group gap="xs">
          <QuickActions
            showExport={cartItems.length > 0}
            onExportPDF={() => exportCartToPDF(cartItems)}
            exportLabel="–≠–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–∑–∏–Ω—ã"
            showClear={cartItems.length > 0}
            onClearData={clearCart}
            clearLabel="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
          />
          {user && (
            <UserMenu 
              user={user} 
              cartItems={cartItems}
              onLogout={handleLogout} 
              onCartClick={() => {}}
            />
          )}
        </Group>
      </Group>

      <Breadcrumbs />

      {cartItems.length === 0 ? (
        <Card withBorder p="xl" style={{ textAlign: 'center' }}>
          <Text size="xl" c="dimmed" mb="md">
            üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
          </Text>
          <Text c="dimmed" mb="lg">
            –î–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
          </Text>
          <Button component={Link} to="/recipes" color="teal">
            –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º
          </Button>
        </Card>
      ) : (
        <>
          {/* –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã */}
          <Table>
            <Table.Thead>
              <Table.Tr>
                <Table.Th>–†–µ—Ü–µ–ø—Ç</Table.Th>
                <Table.Th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</Table.Th>
                <Table.Th>–ö–ë–ñ–£ (–Ω–∞ –ø–æ—Ä—Ü–∏—é)</Table.Th>
                <Table.Th>–î–µ–π—Å—Ç–≤–∏—è</Table.Th>
              </Table.Tr>
            </Table.Thead>
            <Table.Tbody>
              {cartItems.map((item: any) => (
                <Table.Tr key={item.id}>
                  <Table.Td>
                    <Link
                      to={`/recipe/${item.recipe.id}`}
                      style={{ color: 'var(--mantine-color-teal-6)', textDecoration: 'none' }}
                    >
                      {item.recipe.name}
                    </Link>
                  </Table.Td>
                  <Table.Td>
                    <Group gap="xs">
                      <ActionIcon
                        variant="light"
                        color="rose"
                        onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
                      >
                        <DashIcon size={16} />
                      </ActionIcon>
                      <NumberInput
                        value={item.quantity}
                        onChange={(value) => updateCartQuantity(item.id, Number(value) || 0)}
                        min={1}
                        max={99}
                        w={80}
                        size="sm"
                      />
                    </Group>
                  </Table.Td>
                  <Table.Td>
                    <Text size="sm">
                      {item.recipe.calories}/{item.recipe.proteins}/{item.recipe.fats}/{item.recipe.carbohydrates}
                    </Text>
                  </Table.Td>
                  <Table.Td>
                    <ActionIcon variant="light" color="rose" onClick={() => removeFromCart(item.id)}>
                      <TrashIcon size={16} />
                    </ActionIcon>
                  </Table.Td>
                </Table.Tr>
              ))}
            </Table.Tbody>
          </Table>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card withBorder p="md">
            <Group justify="space-between" align="center">
              <Text fw={500}>
                –û–±—â–∏–π –ö–ë–ñ–£: {stats.calories}/{stats.proteins}/{stats.fats}/{stats.carbohydrates}
              </Text>
              <Button variant="light" color="rose" onClick={clearCart}>
                –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
              </Button>
            </Group>
          </Card>
        </>
      )}
    </Stack>
  )
}
