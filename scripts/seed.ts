import { PrismaClient } from '@prisma/client'
import { recipes } from '../src/data.js'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.cartItem.deleteMany()
  await prisma.recipeIngredient.deleteMany()
  await prisma.stockItem.deleteMany()
  await prisma.recipe.deleteMany()
  await prisma.ingredient.deleteMany()

  console.log('üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  const allIngredients = new Map<string, { name: string; amountType: string }>()

  recipes.forEach((recipe) => {
    recipe.ingredients.forEach((ingredient) => {
      if (!allIngredients.has(ingredient.name)) {
        allIngredients.set(ingredient.name, {
          name: ingredient.name,
          amountType: ingredient.amountType,
        })
      }
    })
  })

  const ingredients = Array.from(allIngredients.values())

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –±–∞–∑—É
  for (const ingredient of ingredients) {
    await prisma.ingredient.create({
      data: {
        name: ingredient.name,
        amountType: ingredient.amountType,
      },
    })
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${ingredients.length} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤`)

  // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
  for (const recipe of recipes) {
    const createdRecipe = await prisma.recipe.create({
      data: {
        name: recipe.name,
        calories: recipe.calories,
        proteins: recipe.proteins,
        fats: recipe.fats,
        carbohydrates: recipe.carbohydrates,
      },
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∫ —Ä–µ—Ü–µ–ø—Ç—É
    for (const ingredient of recipe.ingredients) {
      const dbIngredient = await prisma.ingredient.findUnique({
        where: { name: ingredient.name },
      })

      if (dbIngredient) {
        try {
          await prisma.recipeIngredient.create({
            data: {
              recipeId: createdRecipe.id,
              ingredientId: dbIngredient.id,
              amount: ingredient.amount,
            },
          })
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          console.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${ingredient.name} –≤ —Ä–µ—Ü–µ–ø—Ç–µ ${recipe.name}`)
        }
      }
    }
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${recipes.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤`)

  console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
