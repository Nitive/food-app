// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  calories      Float
  proteins      Float
  fats          Float
  carbohydrates Float
  instructions  String?       // Описание приготовления
  cookingTime   Int?          // Время приготовления в минутах
  difficulty    String?       // Сложность: easy, medium, hard
  authorId      Int?          // ID автора рецепта
  author        User?         @relation(fields: [authorId], references: [id])
  ingredients   RecipeIngredient[]
  cartItems     CartItem[]
  calendarItems CalendarItem[]
  foodDiaryEntries FoodDiaryEntry[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("recipes")
}

model Ingredient {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  amountType    String            // гр, мл, шт, по вкусу
  recipeIngredients RecipeIngredient[]
  stockItems    StockItem[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("ingredients")
}

model RecipeIngredient {
  id            Int         @id @default(autoincrement())
  recipeId      Int
  ingredientId  Int
  amount        Float
  recipe        Recipe      @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model CartItem {
  id            Int       @id @default(autoincrement())
  recipeId      Int
  quantity      Int       @default(1)
  recipe        Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("cart_items")
}

model StockItem {
  id            Int         @id @default(autoincrement())
  ingredientId  Int
  amount        Float       @default(0)
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([ingredientId])
  @@map("stock_items")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  picture       String?
  googleId      String    @unique
  recipes       Recipe[]  // Рецепты, созданные пользователем
  calendarItems CalendarItem[]
  foodDiaryEntries FoodDiaryEntry[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model CalendarItem {
  id            Int       @id @default(autoincrement())
  date          DateTime
  mealType      String    // breakfast, lunch, dinner, snack
  recipeId      Int
  userId        Int       // ID пользователя
  recipe        Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([date, recipeId, mealType, userId])
  @@map("calendar_items")
}

model FoodDiaryEntry {
  id            Int       @id @default(autoincrement())
  date          DateTime
  mealType      String    // breakfast, lunch, dinner, snack
  recipeId      Int
  userId        Int       // ID пользователя
  servingSize   Float     // Размер порции
  calories      Float     // Рассчитанные калории
  proteins      Float     // Рассчитанные белки
  fats          Float     // Рассчитанные жиры
  carbohydrates Float     // Рассчитанные углеводы
  recipe        Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("food_diary_entries")
}
